// Code generated by goa v3.8.4, DO NOT EDIT.
//
// hello gRPC client CLI support package
//
// Command:
// $ goa gen github.com/piotrostr/full-auto-gke/api/design

package client

import (
	"encoding/json"
	"fmt"

	hellopb "github.com/piotrostr/full-auto-gke/api/gen/grpc/hello/pb"
	hello "github.com/piotrostr/full-auto-gke/api/gen/hello"
)

// BuildSayHelloPayload builds the payload for the hello say-hello endpoint
// from CLI flags.
func BuildSayHelloPayload(helloSayHelloMessage string) (*hello.SayHelloPayload, error) {
	var err error
	var message hellopb.SayHelloRequest
	{
		if helloSayHelloMessage != "" {
			err = json.Unmarshal([]byte(helloSayHelloMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Rerum a et sed reprehenderit quod.\"\n   }'")
			}
		}
	}
	v := &hello.SayHelloPayload{
		Name: message.Name,
	}

	return v, nil
}
