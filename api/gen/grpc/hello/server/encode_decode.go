// Code generated by goa v3.8.4, DO NOT EDIT.
//
// hello gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/piotrostr/full-auto-gke/api/design

package server

import (
	"context"

	hellopb "github.com/piotrostr/full-auto-gke/api/gen/grpc/hello/pb"
	hello "github.com/piotrostr/full-auto-gke/api/gen/hello"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeSayHelloResponse encodes responses from the "hello" service
// "say-hello" endpoint.
func EncodeSayHelloResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("hello", "say-hello", "string", v)
	}
	resp := NewProtoSayHelloResponse(result)
	return resp, nil
}

// DecodeSayHelloRequest decodes requests sent to "hello" service "say-hello"
// endpoint.
func DecodeSayHelloRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *hellopb.SayHelloRequest
		ok      bool
	)
	{
		if message, ok = v.(*hellopb.SayHelloRequest); !ok {
			return nil, goagrpc.ErrInvalidType("hello", "say-hello", "*hellopb.SayHelloRequest", v)
		}
	}
	var payload *hello.SayHelloPayload
	{
		payload = NewSayHelloPayload(message)
	}
	return payload, nil
}
