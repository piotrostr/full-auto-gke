// Code generated by goa v3.8.4, DO NOT EDIT.
//
// hello gRPC server
//
// Command:
// $ goa gen github.com/piotrostr/full-auto-gke/api/design

package server

import (
	"context"

	hellopb "github.com/piotrostr/full-auto-gke/api/gen/grpc/hello/pb"
	hello "github.com/piotrostr/full-auto-gke/api/gen/hello"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the hellopb.HelloServer interface.
type Server struct {
	SayHelloH goagrpc.UnaryHandler
	hellopb.UnimplementedHelloServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the hello service endpoints.
func New(e *hello.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SayHelloH: NewSayHelloHandler(e.SayHello, uh),
	}
}

// NewSayHelloHandler creates a gRPC handler which serves the "hello" service
// "say-hello" endpoint.
func NewSayHelloHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSayHelloRequest, EncodeSayHelloResponse)
	}
	return h
}

// SayHello implements the "SayHello" method in hellopb.HelloServer interface.
func (s *Server) SayHello(ctx context.Context, message *hellopb.SayHelloRequest) (*hellopb.SayHelloResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "say-hello")
	ctx = context.WithValue(ctx, goa.ServiceKey, "hello")
	resp, err := s.SayHelloH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*hellopb.SayHelloResponse), nil
}
