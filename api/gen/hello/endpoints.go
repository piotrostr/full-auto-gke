// Code generated by goa v3.8.4, DO NOT EDIT.
//
// hello endpoints
//
// Command:
// $ goa gen github.com/piotrostr/full-auto-gke/api/design

package hello

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "hello" service endpoints.
type Endpoints struct {
	SayHello goa.Endpoint
}

// NewEndpoints wraps the methods of the "hello" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SayHello: NewSayHelloEndpoint(s),
	}
}

// Use applies the given middleware to all the "hello" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SayHello = m(e.SayHello)
}

// NewSayHelloEndpoint returns an endpoint function that calls the method
// "say-hello" of service "hello".
func NewSayHelloEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SayHelloPayload)
		return s.SayHello(ctx, p)
	}
}
